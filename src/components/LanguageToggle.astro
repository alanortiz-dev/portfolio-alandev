---
import { useTranslations } from "../i18n/utils";
import { languageList } from "../i18n/ui";
import CheckIcon from "@/components/icons/CheckIcon.astro";

const LANGUAGES = [
  { label: "ðŸ‡ªðŸ‡¸ EspaÃ±ol", value: "es" },
  { label: "ðŸ‡¬ðŸ‡§ English", value: "en" }
];

const currentLang = Astro.url.pathname.split("/")[1] || "es";
const translatedLabels = useTranslations(currentLang as keyof typeof languageList);
---

<div class="relative">
  <button
    id="language-toggle-btn"
    class="block w-full px-2 py-1.5 text-left hover:text-blue-500 dark:hover:text-blue-400"
  >
    {translatedLabels("language.title")}
  </button>

  <div
    id="languages-menu"
    class="absolute hidden left-0 top-0 translate-y-8 w-44 rounded-md border border-gray-200 dark:border-gray-700 bg-white dark:bg-gray-900 shadow-lg text-sm backdrop-blur-md p-1 z-50"
  >
    <ul>
      {LANGUAGES.map((lang) => (
        <li
          class={`flex justify-between items-center languages-menu-option px-2 py-1.5 cursor-pointer hover:bg-neutral-400/40 dark:hover:bg-gray-500/50 rounded-sm ${currentLang === lang.value ? "font-bold text-blue-500 dark:text-blue-400" : ""}`}
          data-lang={lang.value}
        >
          {lang.label}
          {currentLang === lang.value && (
            <CheckIcon class="size-4 text-blue-500 dark:text-blue-400 animate-fade-in ml-2" />
          )}
        </li>
      ))}
    </ul>
    <hr class="my-1 border-gray-300 dark:border-gray-700" />
    <button
      id="back-to-settings-from-lang"
      class="block w-full px-2 py-1.5 text-left text-xs font-semibold text-gray-500 dark:text-gray-400 hover:text-blue-500"
    >
      {translatedLabels("settings.back") || "Volver"}
    </button>
  </div>
</div>

<script is:inline>
  const langBtn = document.getElementById("language-toggle-btn");
  const langMenu = document.getElementById("languages-menu");
  const backBtn = document.getElementById("back-to-settings-from-lang");
  const settingsMenu = document.getElementById("settings-menu");

  langBtn?.addEventListener("click", (e) => {
    e.stopPropagation();
    langMenu?.classList.add("open");
  });

  backBtn?.addEventListener("click", (e) => {
    e.stopPropagation();
    langMenu?.classList.remove("open");
  });

  document.querySelectorAll(".languages-menu-option").forEach((element) => {
    element.addEventListener("click", (e) => {
      const target = e.target;
      if (target instanceof HTMLElement) {
        const lang = target.getAttribute("data-lang");
        if (lang) {
          localStorage.setItem("language", lang);
          let newPath = window.location.pathname;
          if (newPath.startsWith("/es") || newPath.startsWith("/en")) {
            newPath = newPath.substring(3);
          }
          window.location.href = `/${lang}${newPath || "/"}`;
        }
      }
    });
  });

  document.addEventListener("astro:after-swap", () => {
    langMenu?.classList.remove("open");
    window.scrollTo({ top: 0, behavior: "instant" });
  });

  document.addEventListener("click", () => langMenu?.classList.remove("open"));
</script>

<style>
  #languages-menu.open {
    display: block;
    animation: scale-up-center 0.15s ease-out both;
  }

  @keyframes scale-up-center {
    from { transform: scale(0.8); opacity: 0; }
    to { transform: scale(1); opacity: 1; }
  }

  .animate-fade-in {
    animation: fade-in-scale 0.2s ease-out forwards;
  }

  @keyframes fade-in-scale {
    from { opacity: 0; transform: scale(0.7); }
    to { opacity: 1; transform: scale(1); }
  }
</style>
