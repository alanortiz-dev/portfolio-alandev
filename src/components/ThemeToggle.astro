---
import SunIcon from "./icons/Sun.astro";
import MoonIcon from "./icons/Moon.astro";
import CheckIcon from "./icons/CheckIcon.astro";

const THEMES = ["dark", "light"];
const savedTheme = typeof localStorage !== "undefined" ? localStorage.getItem("theme") : null;
const prefersDark = typeof window !== "undefined" && window.matchMedia("(prefers-color-scheme: dark)").matches;
const currentTheme = savedTheme || (prefersDark ? "dark" : "light");
---
<div class="relative ml-1 mr-1">
  <button
    id="theme-toggle-btn"
    class="appearance-none border-none flex hover:scale-125 transition"
  >
    <span class="sr-only">Elige el tema</span>
    <SunIcon id="light" class="theme-toggle-icon size-5 transition-all" />
    <MoonIcon id="dark" class="theme-toggle-icon absolute size-5 transition-all" />
  </button>

  <div
    id="themes-menu"
    class="absolute hidden scale-80 top-8 right-0 text-sm p-1 min-w-[8rem] rounded-md border border-gray-100 bg-white/90 dark:bg-gray-900/90 dark:border-gray-500/20 shadow-[0_3px_10px_rgb(0,0,0,0.2)] backdrop-blur-md"
  >
    <ul id="themes-list">
      {THEMES.map((theme) => (
        <li
          class={`themes-menu-option flex justify-between items-center px-2 py-1.5 cursor-pointer hover:bg-neutral-400/40 dark:hover:bg-gray-500/50 rounded-sm ${
            currentTheme === theme ? "font-bold text-blue-500 dark:text-blue-400" : ""
          }`}
          data-theme={theme}
        >
          {theme.charAt(0).toUpperCase() + theme.slice(1)}
          {currentTheme === theme && (
            <CheckIcon class="size-4 text-blue-500 dark:text-blue-400 animate-fade-in ml-2" />
          )}
        </li>
      ))}
    </ul>
  </div>
</div>

<script is:inline>
  const themeButton = document.getElementById("theme-toggle-btn");
  const themesMenu = document.getElementById("themes-menu");

  function closeMenus() {
    themesMenu?.classList.remove("open");
    document.getElementById("languages-menu")?.classList.remove("open");
  }

  function updateIcons(theme) {
    document.querySelectorAll(".theme-toggle-icon").forEach((el) => {
      el.style.scale = el.id === theme ? "1" : "0";
    });
  }

  function applyTheme(theme) {
    localStorage.setItem("theme", theme);
    document.documentElement.classList.toggle("dark", theme === "dark");
    updateIcons(theme);

    document.querySelectorAll(".themes-menu-option").forEach((el) => {
      el.classList.remove("font-bold", "text-blue-500", "dark:text-blue-400");
      el.querySelector("svg")?.remove();
    });

    const active = document.querySelector(`.themes-menu-option[data-theme="${theme}"]`);
    if (active) {
      active.classList.add("font-bold", "text-blue-500", "dark:text-blue-400");
      const check = document.createElement("span");
      check.innerHTML = `
        <svg class="size-4 text-blue-500 dark:text-blue-400 animate-fade-in ml-2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor">
          <path stroke="none" d="M0 0h24v24H0z" fill="none"/>
          <path d="M18.333 2c1.96 0 3.56 1.537 3.662 3.472l.005 .195v12.666c0 1.96 -1.537 3.56 -3.472 3.662l-.195 .005h-12.666a3.667 3.667 0 0 1 -3.662 -3.472l-.005 -.195v-12.666c0 -1.96 1.537 -3.56 3.472 -3.662l.195 -.005h12.666zm-2.626 7.293a1 1 0 0 0 -1.414 0l-3.293 3.292l-1.293 -1.292l-.094 -.083a1 1 0 0 0 -1.32 1.497l2 2l.094 .083a1 1 0 0 0 1.32 -.083l4 -4l.083 -.094a1 1 0 0 0 -.083 -1.32z"/>
        </svg>`;
      active.appendChild(check);
    }
  }

  const storedTheme = localStorage.getItem("theme");
  const prefersDark = window.matchMedia("(prefers-color-scheme: dark)").matches;
  const resolvedTheme = storedTheme || (prefersDark ? "dark" : "light");

  applyTheme(resolvedTheme);

  document.addEventListener("click", () => closeMenus());

  themeButton?.addEventListener("click", (e) => {
    e.stopPropagation();
    const isClosed = !themesMenu.classList.contains("open");
    closeMenus();
    if (isClosed) {
      themesMenu.classList.add("open");
    }
  });

  document.querySelectorAll(".themes-menu-option").forEach((element) => {
    element.addEventListener("click", () => {
      const theme = element.getAttribute("data-theme");
      if (theme) {
        applyTheme(theme);
      }
    });
  });

  document.addEventListener("astro:after-swap", () => {
    applyTheme(localStorage.getItem("theme") || "dark");
    window.scrollTo({ top: 0, behavior: "instant" });
  });
</script>

<style>
  #themes-menu.open {
    display: inline;
    animation: scale-up-center 0.15s ease-out both;
  }

  @keyframes scale-up-center {
    from { transform: scale(0.8); opacity: 0; }
    to { transform: scale(1); opacity: 1; }
  }

  @keyframes fade-in-scale {
    from { opacity: 0; transform: scale(0.7); }
    to { opacity: 1; transform: scale(1); }
  }

  .animate-fade-in {
    animation: fade-in-scale 0.2s ease-out forwards;
  }
</style>
