---
import SunIcon from "./icons/Sun.astro";
import MoonIcon from "./icons/Moon.astro";
import { useTranslations } from "../i18n/utils";
import { languageList } from "../i18n/ui";

const THEMES = [
  { value: "dark", icon: MoonIcon, label: "üåô" },
  { value: "light", icon: SunIcon, label: "‚òÄÔ∏è" }
  
];

const currentLang = Astro.url.pathname.split("/")[1] || "es";
const translatedLabels = useTranslations(currentLang as keyof typeof languageList);
---

<div class="relative">
  <button
    id="theme-toggle-btn"
    class="block w-full px-2 py-1.5 text-left hover:text-blue-500 dark:hover:text-blue-400"
  >
    {translatedLabels("settings.theme")}
  </button>

  <div
    id="themes-menu"
    class="absolute hidden left-0 top-0 translate-y-8 w-44 rounded-md border border-gray-200 dark:border-gray-700 bg-white dark:bg-gray-900 shadow-lg text-sm backdrop-blur-md p-1 z-50"
  >
    <ul>
      {THEMES.map(({ value, icon: Icon }) => (
        <li
          class="themes-menu-option flex justify-between items-center px-2 py-1.5 cursor-pointer hover:bg-neutral-400/40 dark:hover:bg-gray-500/50 rounded-sm"
          data-theme={value}
        >
          <span class="flex items-center gap-2">
            <Icon class="w-4 h-4" />
            <span class="capitalize">{value}</span>
          </span>
          <span class="check-wrapper" data-check={value}></span>
        </li>
      ))}
    </ul>

    <hr class="my-1 border-gray-300 dark:border-gray-700" />

    <button
      id="back-to-settings-from-theme"
      class="block w-full px-2 py-1.5 text-left text-xs font-semibold text-gray-500 dark:text-gray-400 hover:text-blue-500"
    >
      {translatedLabels("settings.back") || "Volver"}
    </button>
  </div>
</div>

<script is:inline>
  document.addEventListener("DOMContentLoaded", () => {
    const themeBtn = document.getElementById("theme-toggle-btn");
    const themesMenu = document.getElementById("themes-menu");
    const backBtn = document.getElementById("back-to-settings-from-theme");

    function applyTheme(theme) {
      localStorage.setItem("theme", theme);
      document.documentElement.classList.toggle("dark", theme === "dark");
      updateCheckMark(theme);
    }

    function updateCheckMark(current) {
      document.querySelectorAll(".check-wrapper").forEach((span) => {
        const value = span.getAttribute("data-check");
        span.innerHTML =
          value === current
            ? `<svg class="size-4 text-blue-500 dark:text-blue-400 animate-fade-in ml-2" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="3" d="M5 13l4 4L19 7"/></svg>`
            : "";
      });
    }

    const saved = localStorage.getItem("theme") || (window.matchMedia("(prefers-color-scheme: dark)").matches ? "dark" : "light");
    applyTheme(saved); // Inicializa check al cargar

    themeBtn?.addEventListener("click", (e) => {
      e.stopPropagation();
      themesMenu?.classList.add("open");
    });

    backBtn?.addEventListener("click", (e) => {
      e.stopPropagation();
      themesMenu?.classList.remove("open");
    });

    document.querySelectorAll(".themes-menu-option").forEach((el) => {
      el.addEventListener("click", () => {
        const theme = el.getAttribute("data-theme");
        if (theme) applyTheme(theme);
      });
    });

    document.addEventListener("click", () => themesMenu?.classList.remove("open"));

    document.addEventListener("astro:after-swap", () => {
      themesMenu?.classList.remove("open");
      const restored = localStorage.getItem("theme") || "light";
      updateCheckMark(restored);
    });
  });
</script>

<style>
  #themes-menu.open {
    display: block;
    animation: scale-up-center 0.15s ease-out both;
  }

  @keyframes scale-up-center {
    from { transform: scale(0.8); opacity: 0; }
    to { transform: scale(1); opacity: 1; }
  }

  .animate-fade-in {
    animation: fade-in-scale 0.2s ease-out forwards;
  }

  @keyframes fade-in-scale {
    from { opacity: 0; transform: scale(0.7); }
    to { opacity: 1; transform: scale(1); }
  }
</style>
