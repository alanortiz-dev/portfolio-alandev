---
import ThemeToggle from "./ThemeToggle.astro";
import { getRelativeLocaleUrl } from "astro:i18n";
import { useTranslations } from "../i18n/utils";
import { languageList } from "../i18n/ui";
import LanguageToggle from "./LanguageToggle.astro";

interface NavItem {
  title: string;
  label: string;
  path: string;
}

const currentLang = (Astro.currentLocale || "es") as keyof typeof languageList;
const translatedLabels = useTranslations(currentLang);

const navItems: NavItem[] = [
  {
    title: translatedLabels("nav.experience.title"),
    label: translatedLabels("nav.experience.label"),
    path: "/#experiencia",
  },
  {
    title: translatedLabels("nav.projects.title"),
    label: translatedLabels("nav.projects.label"),
    path: "/#proyectos",
  },
  {
    title: translatedLabels("nav.aboutMe.title"),
    label: translatedLabels("nav.aboutMe.label"),
    path: "/#sobre-mi",
  },
  {
    title: translatedLabels("nav.contact.title"),
    label: translatedLabels("nav.contact.label"),
    path: "mailto:alan.omar.ortz@gmail.com",
  },
];

const navLinks = navItems.map((item) => {
  if (item.path.startsWith("mailto:")) {
    return { ...item, url: item.path };
  }
  return {
    ...item,
    url: `${getRelativeLocaleUrl(currentLang, "/")}${item.path.replace("/", "")}`,
  };
});
---

<header class="fixed top-0 z-10 flex items-center justify-center w-full mx-auto mt-2">
  <nav class="flex px-3 text-sm font-medium rounded-full text-gray-600 dark:text-gray-200 justify-center items-center">
    {
      navLinks.map((link) => (
        <a
          class="relative block px-2 py-2 transition hover:text-blue-500 dark:hover:text-blue-500"
          aria-label={link.label}
          href={link.url}
        >
          {link.title}
        </a>
      ))
    }
    <LanguageToggle />
    <ThemeToggle />
  </nav>
</header>

<script>
  document.addEventListener("astro:page-load", () => {
    const sections = document.querySelectorAll("section");
    const navItems = document.querySelectorAll("header nav a");

    const callback = (entries: IntersectionObserverEntry[]) => {
      entries.forEach((entry: IntersectionObserverEntry) => {
        if (entry.isIntersecting) {
          navItems.forEach((item) => {
            if (item.getAttribute("aria-label") == entry.target.id) {
              item.classList.add("text-blue-500");
            } else {
              item.classList.remove("text-blue-500");
            }
          });
        }
      });
    };

    const observer = new IntersectionObserver(callback, {
      root: null,
      rootMargin: "0px",
      threshold: 0.3,
    });

    sections.forEach((section) => {
      observer.observe(section);
    });

    document.onvisibilitychange = () => {
      if (document.visibilityState === "hidden") {
        observer.disconnect();
      } else {
        sections.forEach((section) => {
          observer.observe(section);
        });
      }
    };
  });
</script>

<style>
  nav {
    animation: nav-shadown 1s linear both;
    animation-timeline: scroll();
    animation-range: 0 100px;
  }

  nav {
    @apply dark:bg-gray-800/90 bg-white/50;
  }

  @keyframes nav-shadown {
    0% {
      @apply dark:bg-gray-800/0 bg-white/0;
    }
    to {
      @apply shadow-lg ring-1 backdrop-blur ring-white/10;
    }
  }
</style>
